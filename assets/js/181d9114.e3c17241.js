"use strict";(self.webpackChunktekbot=self.webpackChunktekbot||[]).push([[266],{52:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit2_pcb1-3644342983fa00490c815a7384e43552.png"},554:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit1_pcb2-c1c968e8f5c6d1c7f5f23f5cedea1027.png"},586:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit1_schematic-1c62f9313eae92e17e7c741308af012b.png"},721:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit1_pcb1-d562530314b8f2bc77f43b49438ec4f9.png"},1497:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit2_3D-69a63cff8247e62735cb68c8d006b69c.png"},1711:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"preselection/electronic/test2","title":"2nd Test","description":"Objectives","source":"@site/docs/preselection/electronic/test2.md","sourceDirName":"preselection/electronic","slug":"/preselection/electronic/test2","permalink":"/2025-Team-The_Winners-Docs/docs/preselection/electronic/test2","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/preselection/electronic/test2.md","tags":[],"version":"current","frontMatter":{},"sidebar":"preselectionSidebar","previous":{"title":"1rst Test","permalink":"/2025-Team-The_Winners-Docs/docs/preselection/electronic/test1"},"next":{"title":"3rd Test","permalink":"/2025-Team-The_Winners-Docs/docs/preselection/electronic/test3"}}');var r=i(4848),l=i(8453);const t={},c="2nd Test",d={},o=[{value:"Objectives",id:"objectives",level:2},{value:"Summary",id:"summary",level:2},{value:"Materials",id:"materials",level:2},{value:"Black Box Circuit",id:"black-box-circuit",level:3},{value:"Signaling box",id:"signaling-box",level:3},{value:"\ud83e\uddf1 <em>Structure</em>",id:"-structure",level:2},{value:"\u2699 Hardware design - Circuit Design Process -",id:"-hardware-design---circuit-design-process--",level:4},{value:"\ud83d\udee0 PCB Fabrication Process",id:"-pcb-fabrication-process",level:4},{value:"\ud83c\udfa5 <em>Videos</em>",id:"-videos",level:3},{value:"\ud83e\udde9 <em>Difficulties and Solving Approach</em>",id:"-difficulties-and-solving-approach",level:2},{value:"Software design",id:"software-design",level:2},{value:"ATMEGA328P_CONTROL_STATION_SLAVE_TO_BLACK_BOX_MC",id:"atmega328p_control_station_slave_to_black_box_mc",level:3},{value:"Includes and Configuration",id:"includes-and-configuration",level:4},{value:"Data Structure and Variables",id:"data-structure-and-variables",level:3},{value:"LED Configuration and Control Variables",id:"led-configuration-and-control-variables",level:4},{value:"LED Control Functions",id:"led-control-functions",level:4},{value:"Display and Debug Functions",id:"display-and-debug-functions",level:4},{value:"I2C Communication Function",id:"i2c-communication-function",level:3},{value:"\ud83d\uddbc <em>Photos</em>",id:"-photos",level:2},{value:"\ud83d\uddbc <em>Videos</em>",id:"-videos-1",level:2},{value:"\ud83e\udde9 <em>Difficulties and Solving Approach</em>",id:"-difficulties-and-solving-approach-1",level:2},{value:"Perspectives",id:"perspectives",level:2},{value:"Resources and Useful Links",id:"resources-and-useful-links",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2nd-test",children:"2nd Test"})}),"\n",(0,r.jsxs)("div",{align:"justify",children:[(0,r.jsx)(n.h1,{id:"electronic-design-and-pcb-conception-documentation",children:"Electronic Design and PCB Conception Documentation"}),(0,r.jsx)(n.h2,{id:"objectives",children:"Objectives"}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:"In industries like automotive, aviation, and rail, black boxes are essential for monitoring vehicle activity. These systems record various parameters; in aircraft, for instance, they log pilot communications and flight data such as speed, altitude, and spatial orientation using advanced sensors. This information is crucial for crash investigations."}),(0,r.jsx)(n.p,{children:"For the Tekbot Robotics Challenge, your task is to design a black box capable of recording speed and spatial position data using a gyroscope and accelerometer. This data must be transmitted in real time via I2C to a control station where it will be displayed on an LCD screen. The project has two components: a data-collecting/transmitting black box and a control station for receiving and displaying the data. You\u2019ll present the project through a video showing the box moving in space with its motion data visualized on the control station."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technical Requirements:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reuse the same sensor as the previous project, meaning success depends on your earlier work."}),"\n",(0,r.jsx)(n.li,{children:"Use Atmega328P microcontrollers directly, not Arduino boards."}),"\n",(0,r.jsx)(n.li,{children:"Create electronic schematics using KICAD and design/produce your own PCBs."}),"\n",(0,r.jsx)(n.li,{children:"Build a 7 cm cube (the black box) with an open top if the material is opaque, to view the circuit inside."}),"\n",(0,r.jsx)(n.li,{children:"Design your own power supply (external to the cube)."}),"\n",(0,r.jsx)(n.li,{children:"Create an I2C bus where the microcontroller inside the cube is the only master, and the sensor (inside the cube) and control station microcontroller are slaves. The LCD should operate in 4-bit mode."}),"\n",(0,r.jsx)(n.li,{children:"As before, move the cube in all directions and display real-time data on the LCD."}),"\n",(0,r.jsx)(n.li,{children:"Document your work on the assigned GitHub repository."}),"\n"]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),(0,r.jsx)(n.p,{children:"This documentation describes the design and fabrication of two custom PCBs:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One embedded inside a 7\xd77 cm cube (the black box) responsible for sensing and sending data over I2C."}),"\n",(0,r.jsx)(n.li,{children:"One external circuit acting as a control station that displays the data on an LCD in 4-bit mode and provides user feedback through LEDs."}),"\n"]}),(0,r.jsxs)(n.p,{children:["The boards were designed using ",(0,r.jsx)(n.em,{children:"KiCad"})," and produced via ",(0,r.jsx)(n.em,{children:"UV exposure and chemical etching"}),". Power supply and programming were handled via custom connectors and FTDI interfaces."]}),(0,r.jsx)(n.h2,{id:"materials",children:"Materials"}),(0,r.jsx)(n.p,{children:"List of components used for both the black box and signaling box."}),(0,r.jsx)(n.h3,{id:"black-box-circuit",children:"Black Box Circuit"}),(0,r.jsx)(n.p,{children:"Below is the list of the different components used for the design of the circuits in kiCad."}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Quantity"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ATmega328P"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Microcontroller"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"16MHz Quartz"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Clock source for the microcontroller"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"22pF Capacitors"}),(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Polarization capacitors for the quartz"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MPU 6050"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Gyroscope and accelerometer sensor"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Push Button"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Reset button for the microcontroller"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"10k Resistor"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Pull-up resistor for the reset button"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LED"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Indicator LED on pin 13"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Connectors"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"For FTDI programmer and signaling box connection (I2C connection)"})]})]})]}),(0,r.jsx)(n.h3,{id:"signaling-box",children:"Signaling box"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Quantity"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ATmega328P"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Microcontroller"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"16MHz Quartz"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Clock source for the microcontroller"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"22pF Capacitors"}),(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Polarization capacitors for the quartz"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MPU 6050"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Gyroscope and accelerometer sensor"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Push Button"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Reset button for the microcontrolleur"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"10k Resistor"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Pull-up resistor for the reset button"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LED"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Indicator LED on pin 13"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Connectors"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"For FTDI programmer, black box connection (I2C connection), and LCD (in 4 bits mode)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"N-channel MOSFET"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Protection against polarity reversal"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LEDs"}),(0,r.jsx)(n.td,{children:"6"}),(0,r.jsx)(n.td,{children:"Indicator LEDs for movement directions of black box"})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Tools and software:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"KiCad for schematic and PCB design"}),"\n",(0,r.jsx)(n.li,{children:"UV exposure box"}),"\n",(0,r.jsx)(n.li,{children:"Ferric chloride (FeCl\u2083) for etching"}),"\n",(0,r.jsx)(n.li,{children:"Drill press for holes"}),"\n",(0,r.jsx)(n.li,{children:"Soldering station"}),"\n"]}),(0,r.jsxs)(n.h2,{id:"-structure",children:["\ud83e\uddf1 ",(0,r.jsx)(n.em,{children:"Structure"})]}),(0,r.jsx)(n.h4,{id:"-hardware-design---circuit-design-process--",children:"\u2699 Hardware design - Circuit Design Process -"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Schematic Design (KiCad):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each circuit started with the basic ATmega328P configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clock circuit: 16 MHz crystal + 2\xd722pF capacitors."}),"\n",(0,r.jsx)(n.li,{children:"Reset circuit: Push button with 10k\u03a9 pull-up."}),"\n",(0,r.jsx)(n.li,{children:"Status LED on digital pin 13."}),"\n",(0,r.jsx)(n.li,{children:"FTDI programming header (TX, RX, GND, VCC, DTR)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["For the ",(0,r.jsx)(n.em,{children:"Black Box"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I2C connection to MPU6050."}),"\n",(0,r.jsx)(n.li,{children:"Header for I2C output to control station."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["For the ",(0,r.jsx)(n.em,{children:"Control Station"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"I2C input from Black Box."}),"\n",(0,r.jsx)(n.li,{children:"LCD interface in 4-bit mode."}),"\n",(0,r.jsx)(n.li,{children:"6 LEDs for visual feedback on motion along 6 directions."}),"\n",(0,r.jsx)(n.li,{children:"Polarity protection using a N-channel MOSFET."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"PCB Layout:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All components were placed to ensure compact design, short traces, and accessible connectors."}),"\n",(0,r.jsx)(n.li,{children:"Decoupling capacitors placed near power pins."}),"\n",(0,r.jsx)(n.li,{children:"Ground plane added to reduce noise."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Exporting and Printing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Layouts were exported as mirrored PDF files and printed on transparent film for UV exposure."}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h4,{id:"-pcb-fabrication-process",children:"\ud83d\udee0 PCB Fabrication Process"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"UV Exposure:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The printed film was placed over a photosensitive copper-clad board."}),"\n",(0,r.jsx)(n.li,{children:"Exposed to UV light for ~8 minutes."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Developing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Board developed in sodium hydroxide solution to reveal copper traces."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Etching:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ferric chloride was used to remove unprotected copper."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Drilling and Soldering:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Holes drilled for through-hole components."}),"\n",(0,r.jsx)(n.li,{children:"Components soldered in place with attention to orientation and clearance."}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Boite noire"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Schematic capture:\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(586).A+"",width:"1349",height:"805"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Printed circuit board overview :\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(721).A+"",width:"782",height:"783"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Img1",src:i(554).A+"",width:"861",height:"816"})}),(0,r.jsx)("br",{}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["3-D render of printed circuit board :\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(3566).A+"",width:"935",height:"902"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Boite de signalisation"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Schematic capture: :\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(2849).A+"",width:"1242",height:"823"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Printed circuit board overview :\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(2511).A+"",width:"935",height:"777"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Img1",src:i(52).A+"",width:"1026",height:"815"})}),(0,r.jsx)("br",{}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["3-D render of printed circuit board :\r\n",(0,r.jsx)(n.img,{alt:"Img1",src:i(1497).A+"",width:"1006",height:"801"})]}),"\n"]}),(0,r.jsx)("br",{}),(0,r.jsxs)(n.h3,{id:"-videos",children:["\ud83c\udfa5 ",(0,r.jsx)(n.em,{children:"Videos"})]}),(0,r.jsx)(n.p,{children:"(Insert links or embed videos)"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time-lapse of PCB etching"}),"\n",(0,r.jsx)(n.li,{children:"Assembly of components"}),"\n",(0,r.jsx)(n.li,{children:"Test of LED indicator and MPU movement detection"}),"\n",(0,r.jsx)(n.li,{children:"Data shown in real time on LCD display"}),"\n"]}),(0,r.jsxs)(n.h2,{id:"-difficulties-and-solving-approach",children:["\ud83e\udde9 ",(0,r.jsx)(n.em,{children:"Difficulties and Solving Approach"})]}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Problem"}),(0,r.jsx)(n.th,{children:"Solution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Noise in sensor readings due to poor grounding"}),(0,r.jsx)(n.td,{children:"Added full ground plane and decoupling capacitors"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Difficulty programming ATmega328P directly"}),(0,r.jsx)(n.td,{children:"Used FTDI interface with DTR for smooth uploading"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LCD flickering"}),(0,r.jsx)(n.td,{children:"Implemented delay and correct 4-bit wiring"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Power polarity inversion risk"}),(0,r.jsx)(n.td,{children:"Added MOSFET-based protection circuit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Manual drilling imprecision"}),(0,r.jsx)(n.td,{children:"Used small drill bits with guided PCB holders"})]})]})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h2,{id:"software-design",children:"Software design"}),(0,r.jsx)(n.h3,{id:"atmega328p_control_station_slave_to_black_box_mc",children:"ATMEGA328P_CONTROL_STATION_SLAVE_TO_BLACK_BOX_MC"}),(0,r.jsx)(n.h4,{id:"includes-and-configuration",children:"Includes and Configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <Wire.h> // Essential for I2C communication  \r\n#include <LiquidCrystal.h> // Used to interface with and control the LCD display  \n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.em,{children:"Wire.h"})," and ",(0,r.jsx)(n.em,{children:"LiquidCrystal.h"})," are integrated or native libraries, directly incorporated into Arduino IDE"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"LiquidCrystal lcd(6, 7, 2, 3, 4, 5); : Initializes an LCD object with the specified pin connections in 4-bit mode"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"#define CONTROL_STATION_ADDRESS 0x20 : Defines the I2C address for the Control Station as a slave device"}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"data-structure-and-variables",children:"Data Structure and Variables"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"struct MPUData : Defined to hold MPU6050 sensor data received from the master"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"MPUData receivedData : Stores the latest received data"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"volatile bool newDataReceived = false; : Flag for new I2C data, declared volatile due to ISR modification"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"volatile byte dataBuffer[sizeof(MPUData)]; : Buffer for incoming I2C data"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"volatile byte bufferIndex = 0; : Index for tracking position in dataBuffer"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"byte displayMode = 0; : Controls current LCD display mode:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"0: Movement info"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"1: Accelerations"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2: Gyro"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"3: Angles"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"4: Quaternions"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"5: Temperature"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:"const char* movementNames[] : Maps movementCode to readable names"}),(0,r.jsx)(n.h4,{id:"led-configuration-and-control-variables",children:"LED Configuration and Control Variables"}),(0,r.jsx)(n.p,{children:"In setup() Function"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'pinMode(ledX, OUTPUT);\r\nturnOffAllLeds();\r\nlcd.clear();\r\nlcd.setCursor(0, 0); lcd.print("Control Station");\r\nlcd.setCursor(0, 1); lcd.print("Waiting...");\r\nWire.begin(CONTROL_STATION_ADDRESS);\r\nWire.onReceive(receiveEvent);\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Serial prints confirm initialization and I2C address"}),"\n"]}),(0,r.jsx)(n.p,{children:"loop() Function"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"displayMode = (displayMode + 1) % 6;\n"})}),(0,r.jsx)(n.h4,{id:"led-control-functions",children:"LED Control Functions"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"turnOffAllLeds() : Sets all LED pins to LOW (off)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"updateLedStatus() : Activates LED based on receivedData.movementCode"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"0 (IDLE): No LED, blinking handled by handleLedBlinking()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"1\u20136: Corresponding LED is set HIGH"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Unknown: Calls blinkAllLedsError()"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"handleLedBlinking() : If IDLE, toggles LEDs every BLINK_INTERVAL (500ms)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"blinkAllLedsError() : All LEDs blink rapidly at ERROR_BLINK_INTERVAL (150ms)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"updateLedIntensityPattern() :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Computes 3D acceleration magnitude"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Determines number of LEDs to light based on magnitude thresholds"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h4,{id:"display-and-debug-functions",children:"Display and Debug Functions"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"printAllDataToSerial() :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Prints all received MPU6050 data to Serial Monitor"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Includes movement, dominant acceleration, accelerations, gyroscope, Euler angles, quaternions, temperature"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"updateLCDDisplay() :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Based on displayMode value, shows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"0: Movement name & dominant acceleration"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"1: X, Y, Z accelerations"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"2: X, Y, Z gyroscope values"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"3: Yaw, Pitch, Roll angles"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"4: Quaternions W, X, Y (Z not shown \u2014 likely oversight)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"5: Temperature in Celsius"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"i2c-communication-function",children:"I2C Communication Function"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"receiveEvent(int bytesReceived) : ISR triggered when I2C master sends data"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Resets bufferIndex"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reads bytes from I2C using Wire.available()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Stores bytes into dataBuffer[]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If buffer is complete (bufferIndex >= sizeof(MPUData)):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Copies content to receivedData using memcpy()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sets newDataReceived = true"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"-photos",children:["\ud83d\uddbc ",(0,r.jsx)(n.em,{children:"Photos"})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://drive.google.com/drive/folders/1-pIsd6Fzw0Hrwf2ab8yiY8CrSgnBYATY",children:"Photos"})}),(0,r.jsxs)(n.h2,{id:"-videos-1",children:["\ud83d\uddbc ",(0,r.jsx)(n.em,{children:"Videos"})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://drive.google.com/drive/folders/1-qcIESiL6TPw-95_bMYYVApG4F2-6mOw",children:"Photos"})}),(0,r.jsxs)(n.h2,{id:"-difficulties-and-solving-approach-1",children:["\ud83e\udde9 ",(0,r.jsx)(n.em,{children:"Difficulties and Solving Approach"})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h2,{id:"perspectives",children:"Perspectives"}),(0,r.jsx)(n.p,{children:"Future improvements or additional features that could be implemented in future iterations of the project."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Improvement 1"}),": Description of the potential improvement."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Improvement 2"}),": Description of the potential improvement."]}),"\n"]}),(0,r.jsx)(n.h2,{id:"resources-and-useful-links",children:"Resources and Useful Links"}),(0,r.jsx)(n.p,{children:"Provide links to resources, tutorials, and any other useful information that was referenced during the project."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.kicad.org/",children:"KiCad Official Website"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf",children:"ATmega328P Datasheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://invensense.tdk.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf",children:"MPU 6050 Datasheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.instructables.com/How-to-Make-PCB-Using-Inkjet-Printer/",children:"PCB Fabrication Tutorial"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.arduino.cc/en/Tutorial/BuiltInExamples/ArduinoToBreadboard",children:"Arduino to ATmega328P Standalone Setup"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Ycs0t7YHEOE",children:"How to etch PCBs at home (video)"})}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},2511:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit2_pcb2-ccc407a3aa6eabfc69473b82ee86ac4a.png"},2849:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit2_schematic-8623ffaae2005603cddf8ce9c5831e83.png"},3566:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Test_2_circuit1_3D-1c9596837e76aa485a1442b4b45448e7.png"},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);